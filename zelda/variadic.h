/* 
 * File:   variadic.h
 * Author: pfultz
 *
 * Created on November 19, 2011, 4:59 PM
 */

#ifndef VARIADIC_H
#define	VARIADIC_H

#include "pp.h"
#include <boost/mpl/at.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/remove.hpp>
#include <boost/tuple/tuple.hpp>

#define ZELDA_VARIADIC_PACK(x) BOOST_MPL_PP_DEFAULT_PARAMS(BOOST_MPL_LIMIT_VECTOR_SIZE, x, boost::mpl::na)
#define ZELDA_VARIADIC_UNPACK_VECTOR(x) boost::mpl::vector< BOOST_MPL_PP_PARAMS(BOOST_MPL_LIMIT_VECTOR_SIZE, x) >
#define ZELDA_VARIADIC_UNPACK_TUPLE(x) typename zelda::tuple_factory< ZELDA_VARIADIC_VECTOR_UNPACK(x) >::type


namespace zelda {

namespace details {
template<int N, class Sequence>
struct tuple_factory_impl;

#define ZELDA_DETAIL_VARIADIC_TUPLE_FACTORY_EACH(z, n, data) typename boost::mpl::at_c<Sequence, n>::type
#define ZELDA_DETAIL_VARIADIC_TUPLE_FACTORY(z, n, data) \
template<class Sequence> \
struct tuple_factory_impl<n, Sequence > \
{ \
typedef boost::tuple<BOOST_PP_ENUM(n, ZELDA_DETAIL_VARIADIC_TUPLE_FACTORY_EACH, data)> type; \
}; \

BOOST_PP_REPEAT(10, ZELDA_DETAIL_VARIADIC_TUPLE_FACTORY, data)
}

template<class Sequence>
struct tuple_factory : details::tuple_factory_impl<boost::mpl::size<Sequence>::value, Sequence>
{
};
       
}

#define ZELDA_DETAIL_VARIADIC_ENUM_PACK_N_1 BOOST_PP_ENUM_PARAMS
#define ZELDA_DETAIL_VARIADIC_ENUM_PACK_N_2 BOOST_PP_ENUM_BINARY_PARAMS
#define ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(n, ...) \
PP_CAT(ZELDA_DETAIL_VARIADIC_ENUM_PACK_N_, PP_NARGS(__VA_ARGS__))(n, __VA_ARGS__)

#define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_EACH(z, n, macro) macro(PP_CAT(ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_, n)) 
#define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(n, macro, data) BOOST_PP_ENUM(n, ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_EACH, macro)

# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_0(x) PP_CAT(x, 0 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_1(x) PP_CAT(x, 1 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_2(x) PP_CAT(x, 2 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_3(x) PP_CAT(x, 3 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_4(x) PP_CAT(x, 4 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_5(x) PP_CAT(x, 5 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_6(x) PP_CAT(x, 6 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_7(x) PP_CAT(x, 7 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_8(x) PP_CAT(x, 8 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_9(x) PP_CAT(x, 9 )
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_10(x) PP_CAT(x, 10)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_11(x) PP_CAT(x, 11)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_12(x) PP_CAT(x, 12)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_13(x) PP_CAT(x, 13)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_14(x) PP_CAT(x, 14)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_PACK_15(x) PP_CAT(x, 15)

# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_0(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(0 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_1(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(1 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_2(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(2 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_3(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(3 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_4(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(4 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_5(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(5 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_6(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(6 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_7(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(7 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_8(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(8 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_9(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(9 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_10(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(10, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_11(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(11, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_12(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(12, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_13(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(13, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_14(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(14, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_PACK_15(...) ZELDA_DETAIL_VARIADIC_ENUM_PACK_N(15, __VA_ARGS__)

# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_0(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(0 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_1(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(1 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_2(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(2 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_3(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(3 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_4(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(4 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_5(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(5 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_6(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(6 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_7(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(7 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_8(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(8 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_9(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(9 , __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_10(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(10, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_11(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(11, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_12(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(12, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_13(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(13, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_14(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(14, __VA_ARGS__)
# define ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_15(...) ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_N(15, __VA_ARGS__)

#define ZELDA_DETAIL_VARIADIC_EACH(z, n, macro) \
macro(PP_CAT(ZELDA_DETAIL_VARIADIC_ENUM_PACK_, n), PP_CAT(ZELDA_DETAIL_VARIADIC_ENUM_UNPACK_, n))

#define ZELDA_VARIADIC_N(n, macro) BOOST_PP_REPEAT(n, ZELDA_DETAIL_VARIADIC_EACH, macro) 
#define ZELDA_VARIADIC(macro) ZELDA_VARIADIC_N(10, macro)


#define DETAIL_ZELDA_VARIADIC_TEMPLATE_EMPTY(...)
#define DETAIL_ZELDA_VARIADIC_TEMPLATE(...) template<__VA_ARGS__>
#define ZELDA_VARIADIC_TEMPLATE(...) \
BOOST_PP_IF(PP_IS_EMPTY(__VA_ARGS__), DETAIL_ZELDA_VARIADIC_TEMPLATE_EMPTY, DETAIL_ZELDA_VARIADIC_TEMPLATE)(__VA_ARGS__)

#define ZELDA_DETAIL_VARIADIC_ADD_COMMA(...) , __VA_ARGS__
#define ZELDA_DETAIL_VARIADIC_NO_COMMA(...) __VA_ARGS__
#define ZELDA_VARIADIC_COMMA(...) \
BOOST_PP_IF(PP_IS_EMPTY(__VA_ARGS__), ZELDA_DETAIL_VARIADIC_NO_COMMA, ZELDA_DETAIL_VARIADIC_ADD_COMMA)(__VA_ARGS__)


//#define ZELDA_FOO(pack, unpack) \
//ZELDA_VARIADIC_TEMPLATE(pack(class T)) \
//void foo(pack(const T, &x)) \
//{\
//\
//}\
//
//ZELDA_VARIADIC(ZELDA_FOO)
        
        
       

#endif	/* VARIADIC_H */

